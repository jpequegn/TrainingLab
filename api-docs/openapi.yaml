openapi: 3.0.3
info:
  title: WkoLibrary API
  description: |
    API for the Zwift Workout Visualizer - A web application for loading, visualizing, and managing Zwift workout files (.zwo).

    This API provides endpoints for:
    - Workout file management and parsing
    - Chat integration with AI assistance
    - MCP (Model Context Protocol) server management
    - Health monitoring and metrics

    ## Authentication
    Currently, no authentication is required for local development usage.

    ## Rate Limiting
    Rate limiting is implemented to prevent abuse of AI chat endpoints.

  version: 1.0.0
  contact:
    name: WkoLibrary Support
    url: https://github.com/jpequegn/WkoLibrary
  license:
    name: ISC
    url: https://github.com/jpequegn/WkoLibrary/blob/main/LICENSE

servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://localhost:3000
    description: Alternative development server

paths:
  /workouts:
    get:
      summary: List workout files
      description: Retrieve a list of available workout files in the root directory
      tags:
        - Workouts
      responses:
        '200':
          description: List of workout files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkoutFile'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workouts/{path}:
    get:
      summary: Get workout file or directory contents
      description: Retrieve contents of a specific workout file or directory
      tags:
        - Workouts
      parameters:
        - name: path
          in: path
          required: true
          description: Path to the workout file or directory
          schema:
            type: string
            example: 'sample_workout.zwo'
      responses:
        '200':
          description: Workout file content or directory listing
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WorkoutData'
                  - type: array
                    items:
                      $ref: '#/components/schemas/WorkoutFile'
            application/xml:
              schema:
                type: string
                description: Raw ZWO file content
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chat:
    post:
      summary: Send chat message to AI assistant
      description: Send a message to the AI assistant for workout-related help
      tags:
        - AI Assistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: AI assistant response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: AI service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mcp/status:
    get:
      summary: Get MCP server status
      description: Retrieve the status of all MCP (Model Context Protocol) servers
      tags:
        - MCP Management
      responses:
        '200':
          description: MCP server status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPStatus'

  /mcp/start/{server_name}:
    post:
      summary: Start MCP server
      description: Start a specific MCP server by name
      tags:
        - MCP Management
      parameters:
        - name: server_name
          in: path
          required: true
          description: Name of the MCP server to start
          schema:
            type: string
            example: 'workout_server'
      responses:
        '200':
          description: Server started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPOperationResult'
        '400':
          description: Invalid server name or configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mcp/stop/{server_name}:
    post:
      summary: Stop MCP server
      description: Stop a specific MCP server by name
      tags:
        - MCP Management
      parameters:
        - name: server_name
          in: path
          required: true
          description: Name of the MCP server to stop
          schema:
            type: string
            example: 'workout_server'
      responses:
        '200':
          description: Server stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPOperationResult'

  /mcp/restart/{server_name}:
    post:
      summary: Restart MCP server
      description: Restart a specific MCP server by name
      tags:
        - MCP Management
      parameters:
        - name: server_name
          in: path
          required: true
          description: Name of the MCP server to restart
          schema:
            type: string
            example: 'workout_server'
      responses:
        '200':
          description: Server restarted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPOperationResult'

  /mcp/validate:
    get:
      summary: Validate MCP configuration
      description: Validate the MCP server configuration and connectivity
      tags:
        - MCP Management
      responses:
        '200':
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPValidationResult'

  /health:
    get:
      summary: Health check
      description: Basic health check endpoint
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /health/ready:
    get:
      summary: Readiness check
      description: Check if the service is ready to accept traffic
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /health/live:
    get:
      summary: Liveness check
      description: Check if the service is alive
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /metrics:
    get:
      summary: Application metrics
      description: Retrieve application performance metrics
      tags:
        - Monitoring
      responses:
        '200':
          description: Metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'

components:
  schemas:
    WorkoutFile:
      type: object
      properties:
        name:
          type: string
          description: File or directory name
          example: 'sample_workout.zwo'
        type:
          type: string
          enum: [file, directory]
          description: Type of the item
        size:
          type: integer
          description: File size in bytes (for files only)
          example: 1024
        modified:
          type: string
          format: date-time
          description: Last modified timestamp
          example: '2023-12-01T10:30:00Z'

    WorkoutData:
      type: object
      properties:
        name:
          type: string
          description: Workout name
          example: 'Sweet Spot Intervals'
        author:
          type: string
          description: Workout author
          example: 'TrainerRoad'
        description:
          type: string
          description: Workout description
          example: '4x8min Sweet Spot intervals with 2min recoveries'
        tags:
          type: array
          items:
            type: string
          description: Workout tags
          example: ['sweetspot', 'intervals', 'endurance']
        totalDuration:
          type: integer
          description: Total workout duration in seconds
          example: 3600
        segments:
          type: array
          items:
            $ref: '#/components/schemas/WorkoutSegment'
          description: Workout segments

    WorkoutSegment:
      type: object
      properties:
        duration:
          type: integer
          description: Segment duration in seconds
          example: 300
        power:
          type: number
          format: float
          description: Target power (fraction of FTP)
          example: 0.85
        powerLow:
          type: number
          format: float
          description: Starting power for ramps
          example: 0.6
        powerHigh:
          type: number
          format: float
          description: Ending power for ramps
          example: 1.0
        cadence:
          type: integer
          description: Target cadence
          example: 90
        type:
          type: string
          enum: [warmup, steady, intervals, cooldown, ramp]
          description: Segment type
          example: 'intervals'

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: User message to the AI assistant
          example: 'How can I improve my FTP?'
        context:
          type: object
          description: Additional context for the conversation
          properties:
            currentWorkout:
              type: string
              description: Currently loaded workout name
            userLevel:
              type: string
              enum: [beginner, intermediate, advanced]
              description: User's cycling experience level

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          description: AI assistant's response
          example: 'To improve your FTP, focus on structured training with intervals at or above your current FTP...'
        suggestions:
          type: array
          items:
            type: string
          description: Additional suggestions or follow-up questions
          example:
            [
              'Would you like workout recommendations?',
              'Should I explain power zones?',
            ]

    MCPStatus:
      type: object
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/MCPServerInfo'
        global_status:
          type: string
          enum: [healthy, degraded, error]
          description: Overall MCP system status

    MCPServerInfo:
      type: object
      properties:
        name:
          type: string
          description: Server name
          example: 'workout_server'
        status:
          type: string
          enum: [running, stopped, error]
          description: Server status
        pid:
          type: integer
          description: Process ID (if running)
          example: 1234
        uptime:
          type: integer
          description: Uptime in seconds
          example: 3600

    MCPOperationResult:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        message:
          type: string
          description: Result message
          example: 'Server started successfully'
        server_name:
          type: string
          description: Name of the affected server

    MCPValidationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: Overall validation status
        servers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              valid:
                type: boolean
              errors:
                type: array
                items:
                  type: string

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Health status
        timestamp:
          type: string
          format: date-time
          description: Check timestamp
        details:
          type: object
          description: Additional health details
          properties:
            uptime:
              type: integer
              description: Server uptime in seconds
            memory_usage:
              type: number
              description: Memory usage percentage

    Metrics:
      type: object
      properties:
        requests_total:
          type: integer
          description: Total number of requests processed
        requests_per_second:
          type: number
          description: Current requests per second
        response_time_avg:
          type: number
          description: Average response time in milliseconds
        memory_usage:
          type: number
          description: Memory usage percentage
        cpu_usage:
          type: number
          description: CPU usage percentage

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: 'File not found'
        code:
          type: string
          description: Error code
          example: 'FILE_NOT_FOUND'
        details:
          type: object
          description: Additional error details

tags:
  - name: Workouts
    description: Workout file management and parsing
  - name: AI Assistant
    description: Chat integration with AI assistance
  - name: MCP Management
    description: Model Context Protocol server management
  - name: Monitoring
    description: Health checks and application metrics
