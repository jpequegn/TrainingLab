name: 🔒 Dependency Security Scan

on:
  # Run on all PRs
  pull_request:
    branches: [main, develop]

  # Run weekly security scans
  schedule:
    - cron: '0 9 * * 1' # Every Monday at 9 AM UTC

  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm security audit
        run: |
          # Create reports directory
          mkdir -p reports/security

          # Run audit and save results
          npm audit --audit-level=moderate --json > reports/security/npm-audit.json || true
          npm audit --audit-level=moderate || {
            echo "::warning::Security vulnerabilities found in dependencies"
            exit 0  # Don't fail the build, just warn
          }

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pip-audit safety
          fi

      - name: 🔍 Python security scan
        run: |
          if [ -f requirements.txt ]; then
            # Audit Python dependencies
            pip-audit --format=json --output=reports/security/python-audit.json || true
            
            # Safety check
            safety check --json --output reports/security/safety-check.json || true
            
            echo "Python security scan completed"
          else
            echo "No requirements.txt found, skipping Python security scan"
          fi

      - name: 📊 Generate security report
        run: |
          echo "# 🔒 Security Scan Report" > reports/security/summary.md
          echo "" >> reports/security/summary.md
          echo "Generated on: $(date)" >> reports/security/summary.md
          echo "" >> reports/security/summary.md

          # NPM Audit Summary
          echo "## 📦 NPM Dependencies" >> reports/security/summary.md
          npm audit --audit-level=low --parseable | wc -l | xargs -I {} echo "Total vulnerabilities: {}" >> reports/security/summary.md

          # High severity count
          HIGH_COUNT=$(npm audit --audit-level=high --parseable 2>/dev/null | wc -l || echo "0")
          echo "High severity: $HIGH_COUNT" >> reports/security/summary.md

          # Critical severity count  
          CRITICAL_COUNT=$(npm audit --audit-level=critical --parseable 2>/dev/null | wc -l || echo "0")
          echo "Critical severity: $CRITICAL_COUNT" >> reports/security/summary.md

          echo "" >> reports/security/summary.md

          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Critical security vulnerabilities found! Please address immediately."
            echo "🚨 CRITICAL VULNERABILITIES DETECTED" >> reports/security/summary.md
            npm audit --audit-level=critical
            exit 1
          fi

          # Warn if high severity vulnerabilities found
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "::warning::High severity vulnerabilities found. Consider updating dependencies."
            echo "⚠️ High severity vulnerabilities require attention" >> reports/security/summary.md
          fi

          echo "✅ Security scan completed successfully" >> reports/security/summary.md

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/security/
          retention-days: 30

      - name: 📝 Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('reports/security/summary.md', 'utf8');
              
              // Find existing comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.data.find(
                comment => comment.body.includes('🔒 Security Scan Report')
              );
              
              const commentBody = `${summary}
              
              <details>
              <summary>📋 Security Checklist</summary>
              
              - [ ] No critical vulnerabilities
              - [ ] High severity issues reviewed
              - [ ] Dependencies are up to date
              - [ ] No known security advisories affect this PR
              
              </details>
              
              *This comment is automatically updated by the security scan workflow.*`;
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody,
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody,
                });
              }
            } catch (error) {
              console.log('Could not read security summary:', error.message);
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Fail on critical vulnerabilities
          fail-on-severity: critical
          # Allow moderate and below
          allow-dependencies-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          # Deny specific licenses
          deny-licenses: GPL-3.0, AGPL-3.0

  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📋 Check outdated packages
        run: |
          echo "# 📦 Outdated Dependencies Report" > outdated-report.md
          echo "" >> outdated-report.md
          echo "Generated on: $(date)" >> outdated-report.md
          echo "" >> outdated-report.md

          # Get outdated packages
          npm outdated --json > outdated.json || true

          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "## 🔄 Packages with available updates:" >> outdated-report.md
            echo "" >> outdated-report.md
            
            # Parse and format outdated packages
            node -e "
              const outdated = JSON.parse(require('fs').readFileSync('outdated.json', 'utf8'));
              Object.entries(outdated).forEach(([pkg, info]) => {
                const { current, wanted, latest, type } = info;
                const severity = current !== latest ? '🔴 Major' : '🟡 Minor';
                console.log(\`| \${pkg} | \${current} | \${wanted} | \${latest} | \${severity} |\`);
              });
            " >> outdated-report.md 2>/dev/null || echo "No outdated packages found" >> outdated-report.md
            
            echo "" >> outdated-report.md
            echo "Run \`npm run deps:update\` to update to compatible versions." >> outdated-report.md
            echo "Run \`npm run deps:update:major\` to update to latest versions (review breaking changes)." >> outdated-report.md
          else
            echo "✅ All dependencies are up to date!" >> outdated-report.md
          fi

      - name: 📤 Upload outdated report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-report
          path: outdated-report.md
          retention-days: 7

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📄 Check licenses
        run: |
          # Install license checker
          npx license-checker --summary --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL;CC0-1.0" || {
            echo "::warning::Some dependencies have non-standard licenses. Review manually."
            npx license-checker --summary
          }
